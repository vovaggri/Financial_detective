import SwiftUI

@MainActor
final class TransactionFormViewModel: ObservableObject {
    @Published var errorMessage: String?
    
    // MARK: - –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    private let existingTransaction: Transaction?
    let isEditing: Bool
    let direction: Direction
    let accountId: Int
    let transactionsService: TransactionsService
    let categoriesService: CategoriesService
    let bankAccountsService: BankAccountsService

    private var account: BankAccount?

    // MARK: - –ü—É–±–ª–∏–∫—É–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    @Published var categories: [Category] = []
    @Published var selectedCategoryId: Int = 0
    @Published var amountString: String = ""
    @Published var date: Date = Date()
    @Published var comment: String = ""

    init(
        transaction: Transaction?,
        direction: Direction,
        accountId: Int,
        transactionsService: TransactionsService,
        categoriesService: CategoriesService,
        bankAccountsService: BankAccountsService
    ) {
        self.existingTransaction = transaction
        self.isEditing = transaction != nil
        self.direction = direction
        self.accountId = accountId
        self.transactionsService = transactionsService
        self.categoriesService = categoriesService
        self.bankAccountsService = bankAccountsService

        if let tx = transaction {
            selectedCategoryId = tx.category.id
            amountString = tx.amount.description
            date = tx.transactionDate
            comment = tx.comment ?? ""
            account = tx.account
        } else {
            date = Date()
        }
    }

    /// –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    var currentCategory: Category? {
        categories.first(where: { $0.id == selectedCategoryId })
    }

    /// –ú–æ–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?
    var canSave: Bool {
        guard
            Decimal(string: amountString.replacingOccurrences(of: ",", with: ".")) != nil,
            categories.contains(where: { $0.id == selectedCategoryId }),
            (isEditing ? true : account != nil)
        else { return false }
        return true
    }

    /// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∏ —Å—á—ë—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
    func loadData() async {
        do {
            categories = try await categoriesService.categories(direction: direction)
            if !isEditing {
                account = try await bankAccountsService.fetchAccount()
            }
            if selectedCategoryId == 0 {
                selectedCategoryId = categories.first?.id ?? 0
            }
        } catch {
            print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: \(error)")
        }
    }

    /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
    /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
    func save() async {
        guard
            let account = account,
            let category = categories.first(where: { $0.id == selectedCategoryId }),
            let amount = Decimal(string: amountString.replacingOccurrences(of: ",", with: "."))
        else { return }

        let tx = Transaction(
            id: existingTransaction?.id ?? 0,
            account: account,
            category: category,
            amount: amount,
            transactionDate: date,
            comment: comment.isEmpty ? nil : comment,
            createdAt: existingTransaction?.createdAt ?? Date(),
            updatedAt: Date()
        )

        do {
            if isEditing {
                _ = try await transactionsService.updateTransaction(tx)
            } else {
                _ = try await transactionsService.createTransaction(
                    accountId: tx.account.id,
                    categoryId: tx.category.id,
                    amount: tx.amount,
                    date: tx.transactionDate,
                    comment: tx.comment
                )
            }
        } catch let NetworkError.httpError(statusCode, data) {
            // üéØ –ó–¥–µ—Å—å —É —Ç–µ–±—è –µ—Å—Ç—å statusCode –∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
            print("‚ùå –û—à–∏–±–∫–∞ HTTP: \(statusCode)")

            // –ù–∞–ø—Ä–∏–º–µ—Ä:
            switch statusCode {
            case 400:
                // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await MainActor.run {
                    // –û–±–Ω–æ–≤–∏ @Published —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
                    self.errorMessage = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥"
                }
            case 401:
                await MainActor.run {
                    self.errorMessage = "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Ç–æ–∫–µ–Ω"
                }
            case 404:
                await MainActor.run {
                    self.errorMessage = "–°—á–µ—Ç –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                }
            default:
                await MainActor.run {
                    self.errorMessage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (\(statusCode))"
                }
            }
        } catch {
            // –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Ç—å)
            await MainActor.run {
                self.errorMessage = "–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: \(error.localizedDescription)"
            }
        }
    }


    /// –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    func delete() async throws {
        guard let id = existingTransaction?.id else { return }
        do {
            try await transactionsService.deleteTransaction(id: id)
        } catch TransactionServiceError.notFound(let id) {
            throw TransactionServiceError.notFound(id: id)
        } catch {
            throw error
        }
    }
}
